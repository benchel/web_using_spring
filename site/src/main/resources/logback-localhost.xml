<?xml version="1.0" encoding="UTF-8"?>
<!-- 
*log : 프로그램 실행 중에 발생하는 이벤트나 각기 다른 사용자의 통신 메세지를 기록한 파일
*logging : 로그를 기록하는 행위

 로그를 출력할 수 있는 방법(자바 기준)은 System.out.println()을 이용하는 것이다.
하지만 sysout은 출력되는 로그의 양이나 수준(레벨)을 조절할 수 없고, 출력된 로그를 파일 형태로 저장하기 불편하다.
 또한, 성능 면에서도 낮은 편에 속한다. 그러므로 대다수의 프로그램은 로그 라이브러리를 사용한다.
 
이 프로젝트(gasipan)에서는 slf4j의 구현체인 'Logback'을(를) 사용한다.

- slf4j은 다양한 로그 라이브러리를 인터페이스로 통합하여(=퍼사드 패턴 이용) 사용할 수 있도록 한다.

- slf4j은 spring-boot-logback-web 이(가) 제공. 
Spring을 쓰고 있으므로 해당 라이브러리를 가져오기 위해서 별도의 설정 작업이 필요하지 않다.

작성자 : Benchel
설명 : 로깅에 사용되는 property와 appender를 기술한다.
-->
<!DOCTYPE configuration>
<configuration>

	<property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{36} - %msg%n"/>
	
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender>
	
	<logger name="site" level="OFF"/>
	<logger name="jdbc" level="OFF"/>
	<logger name="jdbc.connection" level="OFF"/>
	<logger name="jdbc.sqlonly" level="INFO"/>
	<logger name="jdbc.sqltiming" level="DEBUG"/>
	<logger name="jdbc.audit" level="OFF"/>
	<logger name="jdbc.resultset" level="OFF"/>
	<logger name="jdbc.resultsettable" level="DEBUG"/>
	
	<root level="INFO">
		<appender-ref ref="CONSOLE"/>
	</root>

</configuration>
<!-- https://mybatis.org/mybatis-3/ko/logging.html -->